
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class KdbProcess {

    public static String Q32EXEC="l32/q";
    public static String Q64EXEC="l64/q";
    static {
        if(System.getProperty("os.name").toLowerCase().contains("win")) {
            Q32EXEC="w32/q";
            Q64EXEC="w64/q";
        }
    }

    public static String QCMD="q";
    static {
        String startKdbCmd = System.getProperty("startKdbCmd");
        if(startKdbCmd != null) {QCMD=startKdbCmd;};
    }

    // This method does not require the q cmd, just the cmdLineParams e.g.
    // String[] cmdLineParams = new String[]{"target/qspecLib/spec.q", "-q", "src/test/qspec"};
    // Process p = KdbProcess.startKdbProcess(cmdLineParams, QHOME, QINIT, "", QLIBPATH);
    public static Process startKdbProcess(String[] cmdLineParams, String QHOME, String QINIT, String QLIC, String QLIBPATH) throws IOException {
        Map<String,String> env = new HashMap<>();
        if(!"".equals(QINIT)){env.put("QHOME",QHOME);};
        if(!"".equals(QINIT)){env.put("QINIT",QINIT);};
        if(!"".equals(QLIC)){env.put("QLIC",QLIC);};
        if(!"".equals(QLIBPATH)){env.put("QLIBPATH",QLIBPATH);};

        String[] cmd = new String[cmdLineParams.length+1];
        cmd[0] = QHOME+"/"+Q32EXEC;
        System.arraycopy(cmdLineParams, 0, cmd, 1, cmdLineParams.length);

        return KdbProcess.startProcess(cmd,env);
    }

    public static Process startProcess(String[] cmd, Map<String,String> env) throws IOException {
        ProcessBuilder processBuilder = new ProcessBuilder(cmd);
        processBuilder.redirectOutput(ProcessBuilder.Redirect.INHERIT);
        processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);
        processBuilder.redirectInput(ProcessBuilder.Redirect.INHERIT);
        processBuilder.environment().putAll(env);
        Process p = processBuilder.start();
        return p;
    }

    //Old version which requires full command
    public static Process startKdbProcess(String[] cmd, String QINIT, String QLIBPATH) throws IOException {
        ProcessBuilder kdbProcess = new ProcessBuilder(cmd);
        kdbProcess.redirectOutput(ProcessBuilder.Redirect.INHERIT);
        kdbProcess.redirectError(ProcessBuilder.Redirect.INHERIT);
        kdbProcess.redirectInput(ProcessBuilder.Redirect.INHERIT);

        if(!"".equals(QINIT)){kdbProcess.environment().put("QINIT",QINIT);};
        if(!"".equals(QLIBPATH)){kdbProcess.environment().put("QLIBPATH",QLIBPATH);};
        Process p = kdbProcess.start();
        return p;
    }

}
