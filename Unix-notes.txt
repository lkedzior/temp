########        SAR        ########
-P flag
Without the -P flag, the sar command reports system-wide (global among all processors) statistics, which are  calculated  as  averages
for values expressed as percentages, and as sums otherwise. If the -P flag is given, the sar command reports activity which relates to
the specified processor or processors. If -P ALL is given, the sar command reports statistics for each individual processor and global statistics among all processors.

-f flag
Specify which historical file to read data from

sar -P ALL -f /var/log/sa/sa13    //historical
sar -P 3,5 -f /var/log/sa/sa13    //historical cpu #3 and #5 only
sar -P ALL 1 3    //realtime ALL cores every 1 second for 3 times (broken down by all cores).

//default CPU command will report on all CPUs
sar -f /var/log/sa/sa20 | head

//to get memory stats
sar -f /var/log/sa/sa20 -r

########        netstat        ########
//number of bytes waiting in input queues
netstat -anp | grep <PID>
or 
netstat -an | grep <PORT> | grep EST

This will show you the socket buffer stats with Recv-Q and Send-Q per socket.
You can also use lsof | grep <PID>, to get ephemeral port and even socket handle FD number for the process/connection.  

//check unlimit settings to limit process memory
http://www.linuxhowtos.org/Tips%20and%20Tricks/ulimit.htm
# ulimit -a 
core file size          (blocks, -c) 0 
data seg size           (kbytes, -d) unlimited 
file size               (blocks, -f) unlimited 
pending signals                 (-i) 8191 
max locked memory       (kbytes, -l) 32 
max memory size         (kbytes, -m) unlimited 
open files                      (-n) 1024 
pipe size            (512 bytes, -p) 8 
POSIX message queues     (bytes, -q) 819200 
stack size              (kbytes, -s) 8192 
cpu time               (seconds, -t) unlimited 
max user processes              (-u) 8191 
virtual memory          (kbytes, -v) unlimited 
file locks                      (-x) unlimited 

To monitor see performance at the task/thread level you can use pidstat which is using 
/proc/pid/task/..
http://www.thegeekstuff.com/2014/11/pidstat-examples/


Process Monitoring with pidstat
Start logging to a file
pidstat -rud -h -p 30861 5 > pidstat.test1.log & echo $!

############## finding proces PID using pgrep (process grep)
e.g.
pgrep -u fxq  //get all fxq user processes
pgrep -u fxq -f "\-p 10010" //f flag for full command line and greps for '-p 10010'

########################Calculate directory location from a shell script
script="`readlink -f "${BASH_SOURCE[0]}"`"
echo "script=$script"
dirpath="`dirname "$script"`"
echo "dirpath=$dirpath"

###################ptp log file shows current drift offset
ls -l /var/log/sfptplog

on ptp we should see less than 40 mikro sec


#############top configuration
add fields - press f
sort by fields - press shift f
sort by mem, add last use cpu filed
save - press W in the main display
