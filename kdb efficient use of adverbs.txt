Adverbs with mondadic functions (each right/left don't work with monads)
f'
f':
f/
f\

1) each both f'
When used with a monadic function will apply f to each element of a list
Same behavior can be achieved using the each function

q)type'[(1; 2h; 3.2)]
-7 -5 -9h
q)type each (1; 2h; 3.2)
-7 -5 -9h
q)

2) peach or each-prior
q)parse"peach"
k){x':y}

': will have peach effect when used with monadic function

': is typically used with dyadic functions e.g.
q)deltas
-':

3) over f/ and scan for recursion
f/[n;arg]
f/[cond;arg]   //cond functions is passed a result of each f[arg] iteration
f/[arg] -runs until arg=f[arg] or f[arg] = original arg passed at the very begining


3a)Run f recursively n times
q){2*x}/[10;2]
2048

q){2*x}\[10;2]
2 4 8 16 32 64 128 256 512 1024 2048

3b) while(cond) - recursive calls as long as condition is true (stops after first false)
f\[cond;100]

q)f:{x+1}
q)cond:{x<105}
q)f\[cond;100]
100 101 102 103 104 105

//alternative syntax
q)cond f\100
100 101 102 103 104 105

3c) recurive calls until argument = result (converge)
//runs until arg=f[arg] or f[arg] = original arg passed at the very begining

f\[arg]
q){floor x % 2}\[7]
7 3 1 0
/(7)(7%2)(3%2)(1%2)(0%2=0)

Practical example of this is finding the parent id
See example in Adverbs.q

or flattenList function raze/ or ,// discussed later

######################################
II Dyadic functions
1)Each both

a) If both params are atoms - no effect
q)1 ~' 1
1b

b) If one arg is an atom and the other is a list
then atom will act as if it is a list of the same length as the non-atom argument.
q)1 ~' 1 2 3
100b

c) If both params are lists then they must be of the same length
q)(1 2),'(10 20)
1 10
2 20

2) Each-Prior
Common use of this in the deltas function
-':

Also differ function uses ':
differ definition is negation of ~':
not ~':

The prior function is defined as ': (same as scan and over function provide keyword for \ and /)
q)parse"prior"
k){x':y}
q)parse"scan"
k){x\y}
q)parse"over"
k){x/y}
q)

3)Each-Right
If the left arg is an atom then the each-both adverb will produce the same result as the each right adverb.
Howeve, if the left argument is a list then the each-right adverb must be used.

q)` sv/: `:/mydb/2013.05.01/trade,/:key[`:/mydb/2013.05.01/trade]except `.d
`:/mydb/2013.05.01/trade/sym
`:/mydb/2013.05.01/trade/time
`:/mydb/2013.05.01/trade/price
`:/mydb/2013.05.01/trade/size
`:/mydb/2013.05.01/trade/ex

4)Over and Scan
Two variations
f/[a;list]
f/[list]

#################################################
III Higher valence functions

1) over and scan
q)({x+y+z}\)[1;2 3 4;5 6 7]
8 17 28

In this example the first iteration will use 1 as the x param, 2 as the y param and 5 as the z param.
The result of of this iteration (8)  is passed as x with 3 as y and 6 as the z parameter.

The length of second and third arg must be the same. If one of them is an atom then it will be used in each iteration.


####################################################
IV Combining Adverbs

E.g. cross on 2 lists
q)raze (1 2 3),/:\:10 20 30
1 10
1 20
1 30
2 10
2 20
2 30
3 10
3 20
3 30

q)L2:10 20 30
q)(raze (1 2 3),/:\:L2)~ (1,/:L2),(2,/:L2),(3,/:L2)
1b

We can see that f/:\: is applying each left on f/:
Right to left evaluation

Another example: flatten a nested list repeatedly until it cannot be flattened anymore
raze is defined as ,/

running it as scan to see intermediate results
q)(,\)[(1 2; (4 5; 6); 7)]
1 2
(1;2;4 5;6)
(1;2;4 5;6;7)

q)(,\)[(1;2;4 5;6)]
,1
1 2
1 2 4 5
1 2 4 5 6
q)

q)(,\)[1 2 4 5 6]
,1
1 2
1 2 4
1 2 4 5
1 2 4 5 6

raze is monadic
we already now that
3c) recurive calls until argument = result (converge)
f/[arg]

now running ,// or raze/
q)(,//)[(1 2; (4 5; 6); 7)]
1 2 4 5 6 7

/////////////////////////////////////////////
example with combined each-both
q)lst:(3 2 8;(3.2;6h);("AS";4))
q)lst
3 2 8
(3.2;6h)
("AS";4)
q)type'[lst]
7 0 0h
q)type''[lst]
-7 -7 -7h
-9 -5h
10 -7h
q)type'''[lst]
-7 -7 -7h
-9 -5h
(-10 -10h;-7h)
q)

/////////////////////////
Adverbs and tables
table is a list of dictionaries

q)a:([]a:`a`b`c`d;b:1 2 3 4;c:(1 2;2 3;3 4;4 5))
q)type a
98h
q)type'[a]
99 99 99 99h
q)type''[a]
a   b  c
--------
-11 -7 7
-11 -7 7
-11 -7 7
-11 -7 7
q)

q)distinct type’’[a]
a   b  c
--------
-11 -7 7
q)


q)a:([]a:`a`b`c`d;b:1 2 3 4;c:(1 2;2 3;3 4.;4 5))
q)distinct type’’[a]
a   b  c
--------
-11 -7 7
-11 -7 9
q)



