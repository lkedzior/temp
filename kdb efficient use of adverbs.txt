Adverbs with mondadic functions (each right/left don't work with monads)
f'
f':
f/
f\

1) each both f'
When used with a monadic function will apply f to each element of a list

q)type'[(1; 2h; 3.2)]
-7 -5 -9h

Same behavior can be achieved using the each function
(each is a function)
type each (1; 2h; 3.2)

2) peach or each-prior
q)parse"peach"
k){x':y}

': will have peach effect when used with monadic function

': is typically used with dyadic functions e.g.
q)deltas
-':

3) over f/ and scan
Run f recursively n times
q){2*x}/[10;2]
2048

q){2*x}\[10;2]
2 4 8 16 32 64 128 256 512 1024 2048

######################################
II Dyadic functions
1)Each both

a) If both params are atoms - no effect
q)1 ~' 1
1b

b) If one arg is an atom and the other is a list
then atom will act as if it is a list of the same length as the non-atom argument.
q)1 ~' 1 2 3
100b

c) If both params are lists then they must be of the same length
q)(1 2),'(10 20)
1 10
2 20

2) Each-Prior
Common use of this in the deltas function
-':

Also differ function uses ':
differ definition is negation of ~':
not ~':

The prior function is defined as ': (same as scan and over function provide keyword for \ and /)
q)parse"prior"
k){x':y}
q)parse"scan"
k){x\y}
q)parse"over"
k){x/y}
q)
