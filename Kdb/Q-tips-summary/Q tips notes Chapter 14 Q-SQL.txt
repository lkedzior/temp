Q-SQL
Many operations available in q-sql can also be done with q operators, but since q-sql syntax is quite strict, q can use
a combination of lookaheads and parallelism to optimize queries on large data sets.

select id,date,px:price from t

It is important to realize that even though we created a new table by selecting data from t,
we did not actually make a full copy of the data.

Kdb+ is a column oriented database, and as such, columns are contiguous blocks of memory that can be passed as references.

A reference to a column is kept until the data is modified. When this occurs, q creates a full copy of the data.

where clauses
The clauses are each applied form left to right
each clause is evaluated from right to left

only the rows that are selected by the first clause are passed for evaluation to the second clause and so on. 

, vs and
Using the and operator in where clause loses the short-circuit features of ","

In contrast, there is no short-circuit syntax for queries looking for rows that match either one condition or another

Q Tip 14.3 Use De Morgan's Laws to optimize where clauses
select from t where (id=1) or date.month=2000.02m

Laws
not (A or B) is the same as not(A) and not(B)

so A or B -> not not (A or B) -> not(not(A) and not(B))


select .... where A or B
is same as
delete ..... where not(A), not(B)

select from t where (id=1) or date.month=2000.02m
delete from t where not id=1, not date.month=2000.02m

An inefficient or statement can be easily converted to use a comma by negating each of the conditions and replacing the select with delete

Exception
If a condition relies on the result of a uniform or aggregate function, it must be placed as the first where clause.
All remaining clauses should only use atomic functions(atomic function retuns a list when called with a list).
If a second condition uses uniform or aggregate functions, the resulting table will not match the original query

Atomic - A function that returns an atom when called with an atom, and a list when called with a list.
The return values for a given argument is always the same, regardless if it was called as an atom or a member of a list.

Uniform - Like an atomic function, but when called with a list, the results depend on other elements within the list.
The results are therefore not the same as calling the function individually on each element of the list.

Delete statement can also be used to remove columns
q)delete id from t
We can't issue a delete statement with both columns and rows specified.
q)delete id from t where date.month=2000.02m
'nyi

'nyi (not yet implemented) indicates that the implementation is in some way controversial.

#######################Update

By themselves select, delete update and where are simple transformations that can be achieved with standard q syntax

select id, date from t => `id`date#t

select from t where date.month=2000.02m => t where 2000.02m="m"$t`date

update func[price] from t => @[t;`price;func]

but implementing the by clause is a bit more involved.

select avg price by id from t

update ret:deltas[0n;log price] by id from t

The by clause performs three actions
1) groups the data using the columns in the by clause
2) Iterates over each group(distinct value) and applies our function
3) Final step depends on whether we used a select or update
select - will sort the results (returns keyed table)
update - does not return a keyed table, will align the results to match the location of the original layout

e.g. notice only one raw with id=0 in the select results
and multiple entries with id=0 in the update case (result of update by is not keyed table)

q)t
id date       price
----------------------
0  2000.01.01 100
0  2000.01.02 100.0632
0  2000.01.03 100.122
...

q)select avg price by id from t
id| price
--| --------
0 | 85.8896
1 | 111.7553
2 | 56.75649
3 | 119.7042
4 | 96.39676
q)

q)update ret:deltas[0n;log price] by id from t
id date       price    ret
------------------------------------
0  2000.01.01 100
0  2000.01.02 98.99257 -0.01012537
0  2000.01.03 99.00905 0.0001664493
0  2000.01.04 98.0201  -0.01003867
...

The results of the select query have the `s# or `p# attribute on the first column

q)meta select avg price by id from t
c    | t f a
-----| -----
id   | j   s
price| f

q)meta select avg price by id,date from t
c    | t f a
-----| -----
id   | j   p
date | d
price| f
q)

In both cases (by one or multiple cols) the key table is sorted / has got `s#
q)0N!select avg price by id from t;
(`s#+(,`id)!,`s#0 1 2 3 4)!+(,`price)!,85.8896 111.7553 56.75649 119.7042 96...
q)0N!select avg price by id,date from t;
(`s#+`id`date!(`p#0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0..
q)

[LK]
Noticed we used aggregate function for select by
and uniform function for update by

dot notation
by date.week
by `week$date
The functionality is the same but you will notice q changes the column name when dot notation is used.
In either case you can choose the column name yourself

dot notation extracts a "sub" type

We can cast to integers too
All integer casts
q)`year`mm`dd`hh`uu`ss$\:2001.09.11D08:46
2001 9 11 8 46 0i
q)

dot notation can be used on global variables only
q)tm:0D
q)tm.minute
00:00
q)

dod notation does not work on function parameters or variables. Because of that it is safer to always use
explicit casting instead of using dot notation
`minute$x

By Gotchas

/price is return as a list (not as atom as one may think looking at the console result)
q)select price by id,date from t
id date      | price
-------------| --------
0  2000.01.01| 100
0  2000.01.02| 98.99257
0  2000.01.03| 99.00905
...

q)meta select price by id,date from t
c    | t f a
-----| -----
id   | j   p
date | d
price| F


By not specifying any columns we get last row
select by id from t  //simpler query increased performance

###########################Exec
select is special case of exec
select always return table
exec can return atom, list dictionary, table

/atom
q)exec first price from t
100f

/list
q)exec price from t
100 98.99257 99.00905 98.0201 97.22984 97.22211 97.48342 96.53205 96.89755 96..

/same but as dictionary
q)exec px:price from t
px| 100 98.99257 99.00905 98.0201 97.22984 97.22211 97.48342 96.53205 96.8975..

/dictionary
q)exec id,date,price from t
id   | 0          0          0          0          0          0          0   ..
date | 2000.01.01 2000.01.02 2000.01.03 2000.01.04 2000.01.05 2000.01.06 2000..
price| 100        98.99257   99.00905   98.0201    97.22984   97.22211   97.4..

The select statement is a layer around exec that, in addition to providing optimizations for querying large historical databases,
flips the result of exec.

q)flip exec id,date,price from t
id date       price
----------------------
0  2000.01.01 100
0  2000.01.02 98.99257
...

BUT EXEC CAN RETURN FOUR MORE TYPES OF DICTIONARIES, DEPENDING ON THE TYPE OF THE KEY AND VALUE.

1) Using a single column in both the key and value generates a simple dictionary
q)exec last price by date from t where id=0
2000.01.01| 100
2000.01.02| 98.99257
2000.01.03| 99.00905
2000.01.04| 98.0201
2000.01.05| 97.22984
2000.01.06| 97.22211

2) Selecting multiple values in either the key or value, or explicitly providing a name generates a table.

q)exec price by date:date from t where id=0
q)exec price:price by date from t where id=0
q)exec price:price by date:date from t where id=0
q)exec px:last price by id,date from t where id=0

######################Exec by

We have seen how q returns the last row of every key when a select by query does not specify any columns.

By performing an exec by query we can apply any operation across multiple columns.

For example, instead of selecting the first date and price for every ID
q)select first date, first price by id from t
id| date       price
--| ----------------
0 | 2000.01.01 100
1 | 2000.01.01 100
2 | 2000.01.01 100
q)

We can exec a table and use first operator a single time.
q)exec first ([]date;price) by id:id from t
id| date       price
--| ----------------
0 | 2000.01.01 100
1 | 2000.01.01 100
2 | 2000.01.01 100
q)

This works because calling first on the table creates a dictionary.
The by clause causes one dictionary to be created for each id, and the resulting list of dictionaries is then promoted to a table.

Q Tip 14.6 Simplify queries by using exec by

When the result of each statement within an exec by query is a dictionary with conforming keys that are symbols, q will promote the list of dictionaries to a table.

TO GENERATE A DICTIONARY WE CAN EITHER PERFORM A SINGLE OPERATION ON A TABLE,
OR ASSIGN A KEY TO A FUCNTION THAT RETURNS MULTIPLE VALUES.

e.g. ohlc function
We are prerforming a list of functions on the same dataset
q)select o:first price, h:max price, l:min price , c:last price by id,date from t
id date      | o        h        l        c
-------------| -----------------------------------
0  2000.01.01| 100      100      100      100
0  2000.01.02| 103.0084 103.0084 103.0084 103.0084
0  2000.01.03| 104.5936 104.5936 104.5936 104.5936
0  2000.01.04| 103.8289 103.8289 103.8289 103.8289
0  2000.01.05| 103.7782 103.7782 103.7782 103.7782
0  2000.01.06| 103.4662 103.4662 103.4662 103.4662

q)ohlc:{`o`h`l`c!(first;max;min;last)@\:x}
q)exec ohlc price by id,date from t
id date      | o        h        l        c
-------------| -----------------------------------
0  2000.01.01| 100      100      100      100
0  2000.01.02| 103.0084 103.0084 103.0084 103.0084
0  2000.01.03| 104.5936 104.5936 104.5936 104.5936
0  2000.01.04| 103.8289 103.8289 103.8289 103.8289
0  2000.01.05| 103.7782 103.7782 103.7782 103.7782

another example with different function with summary statistics
q)summary:{`n`mn`mx`md`dv!(count;min;max;med;sdev)@\:x}
q)exec summary price by id,date from t
id date      | n mn       mx       md       dv
-------------| -------------------------------
0  2000.01.01| 1 100      100      100
0  2000.01.02| 1 103.0084 103.0084 103.0084
0  2000.01.03| 1 104.5936 104.5936 104.5936

################14.2 Pivot Tables
q)"i"$.util.pivot 2!select date,id,price from t
date      | 0   1   2
----------| -----------
2000.01.01| 100 100 100
2000.01.02| 103 104 99
2000.01.03| 105 103 100
2000.01.04| 104 106 98

Q Tip 14.8 Only transform tables into pivot tables for presentation

Generating of a pivot table should be one of the last steps in any analysis. Adding an extra summary column and row at the end
and bottom of the table is probably the only adjustment we are likely to make to our pivot table.

When deciding which field to place in the column headers (date or id?)) - we should place the field with the fewest distinct items tin te column headers (so id not date)

Our pivot table takes single argument a keyed table
It derives all configuration parameters from the incoming table.

1) using exec by crete a dictionary
q)exec id!price by date from t
2000.01.01| 0 1 2!100 100 100i
2000.01.02| 0 1 2!103 104 99i
2000.01.03| 0 1 2!105 103 100i
2000.01.04| 0 1 2!104 106 98i

2) turn it into a table by giving name to the key
q)exec id!price by date:date from t
date      |
----------| ------------------
2000.01.01| 0 1 2!100 100 100i
2000.01.02| 0 1 2!103 104 99i
2000.01.03| 0 1 2!105 103 100i
2000.01.04| 0 1 2!104 106 98i

And to promote the list of dictionaries to a table we need to convert the keys to symbols
q)exec (`$string id)!price by date:date from t
date      | 0   1   2
----------| -----------
2000.01.01| 100 100 100
2000.01.02| 103 104 99
2000.01.03| 105 103 100
2000.01.04| 104 106 98

These are the basic operations 
1) use exec by and give name to the key to get a table
2) make sure the pivot column names are symbol

This will not work if we are missing some values and dictionaries do not conform
e.g. when we remove id=0 for 2000.01.01
q)exec (`$string id)!price by date:date from 1_t
date      |
----------| -------------
2000.01.01| `1`2!100 100i
2000.01.02| `0`1`2!103 104 99i
2000.01.03| `0`1`2!105 103 100i

That's why we must endure each dictionary has the same number, and ordering, of elements.

We can do this by first constructing a unique list of ids and then use take operator on the dictionary so that
null is returned for missing cases

q)u:`$string distinct t`id
q)exec u#(`$string id)!price by date:date from 1_t
date      | 0   1   2
----------| -----------
2000.01.01|     100 100
2000.01.02| 103 104 99
2000.01.03| 105 103 100



###############
select[5] from t /first 5 rows, works for memory and splayed tables only
select[-5] from t /last 5 rows
select[5 2] from t /returns 2 rows, 5 is the initial row number

####Sorting
Instead of using xasc and xdesc to sort a table after it has been created, we can specify which comparison
operation to use at the time of table selection.
Using this technique is useful when the sorting criteria is not an existing column in the table
q)select[< abs price] from t   /sort by absolute price (ascending)

To sort by multiple columns
/sort descending by date but ascending by ID
q)select[>([]date;neg id)] from t

/we can combine the row selection and sorting
q)select[5 5;>([]date;neg id)] from t

#######################fby

How to select rows from a table with max price for each symbol?

q)t:([]sym:`aaa`aaa`aaa`bbb;date:.z.d;price:10 10 9 100)
q)t
sym date       price
--------------------
aaa 2018.05.07 10
aaa 2018.05.07 10
aaa 2018.05.07 9
bbb 2018.05.07 100

We could sort the table by price and select last row by sym

q)select by sym from `price xasc t
sym| date       price
---| ----------------
aaa| 2018.05.07 10
bbb| 2018.05.07 100
q)

but it is possible to ahieve the same much more efficiently without sorting with fby
q)select from t where 0=(rank;neg price) fby sym

The rank operator provides the ordinal ranking of a list where the smallest value receives a rank of 0
q)rank 1 1 2 2 3
0 1 2 3 4
q)rank 3 1 1 2 2
4 0 1 2 3

It is also possible to rank values/list between a min and max rank
e.g. max ran is 5

q)5 xrank til 10
0 0 1 1 2 2 3 3 4 4

q)select from t where 0=(rank;neg price) fby sym
sym date       price
--------------------
aaa 2018.05.07 10
bbb 2018.05.07 100
q)

Grouping by more than one column requires a table to be specified
select from t where 0=(rank;neg price) fby ([]sym;date.year)

########################Using q-SQL on Dictionaries (update & delete, select?)
Q-SQL also works on dictionaries. E.g.

//bs,as bidSize, askSize, ap,bp askPrice, bidPrice
q)update mp:(bs;as) wavg (ap;bp) from dict

Dictionary is equivalentto a single row of a table, and as such, the where and by clauses have no meaning.
Including a where clause withh throw a 'type error, while the by clause is silently ignored. 

Just as table column names are stored as a list of symbols, a dictionary's key must also be a symbol vector for Q-SQL to work

Recall that namespaces are actually dictionaries whose keys are symbols. That's why this works
q)delete t from `.
q)delete from `.    //delete all values from the global namespace




######14.4 Joining datasets
lj example

#The select statement returns an unkeyed table, so we must re-apply the key
price lj 1! select id,ts from ref

#If we don't have to rename the columns we can use this notation which does not require re-applying the key
#(1#`ts) is used to enlist
The #/: operator leaves the table's key in-place and takes "#" the requested fields
price lj (1#`ts)#/:ref

Althoughit uses the each notation, it is optimized to pick just the requested columns from the table instead of splitting the table
into a list of dictionaries.
q)kt:([id:1 2 3] a:1 2 3;b:10 20 30)
q)kt
id| a b
--| ----
1 | 1 10
2 | 2 20
3 | 3 30
q)(1#`a)#/:kt
id| a
--| -
1 | 1
2 | 2
3 | 3
q)

###
Once the datasets become large, the join speed depends on how quickly q can find the correct row of the right table for every row of the left table.
Without any attributes on the first keyed column, matches are found by sequentially searching each row until equality is found.

Attributes are expensive to add, so q does not create them by default. In addition, when elements are removed from a list its attribute is dropped as well. Sorted lists, for example remain sorted even after removing elelements. The problem occurs with the other attributes that maintain internal hash tables: `u,`p and `g.
Building these hash tables is expensive, and removing elements can cause memory reallocation accompanied by erratic performance delays.
It is therefore left to the developer to determine when to add attributes.

Only the upsert and compund assignment operators have the ability to preserve attributes. All other operations return copies of the data structure, and thus lose the attribute, even if the attribute is still valid.


####pj
The pj operator behaves exactly like the left join operator, except that all columns taht exist in both tables are added together,
with missing entries filled with 0.

lj, pj, ij require a primary key in the right table.
A primary key indicates a uniqueness of values in a single column, or multiple columns for a composite key.
#### Equi join ej
ej allows us to join two tables where there is no primary key on either table, but yet we wish to specify a set of columns to use for the join.
ej[`id;price;ref]

For cases where the table has multiple rows with the same matching criteria, the result will have more rows that the equivalent inner join.

###Asof Joins
aj[`id`time;t;select from quotes where date=dt]
The last specified join column must be the temporal column.
All asof joins use the binary search algorithm to find the proper rows to join.
For this to work propertly, the temporal column must be sorted in ascending order.
All non-temporal join columns are used to find an exact match to narrow the rows before performing the binary search.
It is within the narrowed set of rows that the temporal column must be sorted - not the whole column.

aj returns the time from the left table
aj0 operator returns the time from the right table
To get both
aj[`id`time;t] select id, time, qtime:time, bp,ap from quotes

######Performance of the aj
Pefrormance of the asof join is very sensitive to how fast the exact match can be performed.
Matching on more than two columns can slow the join down. After the first column is matched, any attribute on the second column will be LOST, resulting in a linear search.

Instead of performing a 3-column asof join
t:select from trades
aj[`date`id`time;t] select from quotes

it is much more efficient to do it daily
(less memory used and attributes within each quote partition are preserved)
t:select from trades
g:t group t`date
q)t group t`date
2018.05.08| +`date`id`size`price!(,2018.05.08;,0;,10;,101)
2018.05.09| +`date`id`size`price!(,2018.05.09;,1;,20;,102)
2018.05.10| +`date`id`size`price!(,2018.05.10;,2;,30;,103)

raze {[dt;events]aj[`id`time;events] select from quotes where date=dt}'[key g;g]

We have to have `p or `g attribute on the first exact match column in the right table

#############Stopping kdb/query
Once a query has started, we have three ways to stop it.
1) The SIGTERM(15) signal (default kill signal) allows the current thread to complete and then calls the .z.exit callback before exiting.
2) The SIGINT(2) signal will interrupt the current thread of execution, if possible, and then call the .z.exit
3) The SIGKILL(9) as a last resort

###########wj join
There are two assumptions about the data that must be true.
Firstly, in addition to the time column, there can only be a single column which uniquely identifies a record.
And secondly, the table must be sorted first by the identifier and then by time with the partition attribute `p on the identifier column.

Other joins allow the data to be un-partitioned as long as a `g attribute is placed on the identifier column.
THE wj OPERATOR, HOWEVER, DOES NOT ALLOW THIS.
The query will execute, but the results will be meaningless.

For this reason it is not possible to use the wj operator across multiple ids on a real-time database.
It is meant to be used on an historical database where data has been sorted within partitioned sections.

wj[t.time+/: -0D00:00:01 0D;`id`time;t](q;(avg;`bp);(avg;`ap)

wj considers prevailing quote
wj1 does not consider events outside the window

Due to its implementation, the wj operator can only work with integer temporal values.
This means that the datetime and any other float value can not be used with wj or wj1


####Joins for Dictionaries

aj and lj have variants that work for dictionaries as well.
Joining a dictionary with a table comes in handy when implementing CEP upd function. Single events
can arrive as dictionaries and will then need to be merged with existing data for analysis.

//lj using , example
//create a dictionary for this example
q)d:((1#`id)!1#0)
q)d
id| 0

q)ref:([id:0 1]; size:10 10; price: 100 101)
q)ref
id| size price
--| ----------
0 | 10   100
1 | 10   101
q)
q)d,ref   //note ref must be keyed table
id   | 0
size | 10
price| 100
q)d
id| 0
q)d,:ref
q)d
id   | 0
size | 10
price| 100
q)

So the "," operator, and the compound assignment version ",:" work like the lj operator to join a dictionary with
either another ditionary or a table.
The aj also has a corresponding operator that works for dictionaries and tables: asof.

The syntax:
In our example, the left operand is the quote table, while the right operand is the dictionary or table representing the trade or trades
that need to be matched (events)
Every field in the dictionary (or column in the table) is used to search through the quote table.
Since the right operand specifies the exact key to use for the search, there is no need to apss a third argument indicating the join columns.

q)quote:([]id:0 1; time:0D10; size:10 20; price:101 102)
q)quote
id time                 size price
----------------------------------
0  0D10:00:00.000000000 10   101
1  0D10:00:00.000000000 20   102
q)quote asof `id`time!(0;0D11)
size | 10
price| 101

//to recover the all fields we can save them and then prepend them to the result of asof
q)k,quote asof k:`id`time!(0;0D11)
id   | 0
time | 0D11:00:00.000000000
size | 10
price| 101
q)

Q Tip 14.11 Use dictionary joins for performance
(Promoting dictionaries to single row tables merely to use lj and aj would slow down a CEP)

///The end of the chapter 14





