When error is generated from command line session, a debugging mode is started.

//no function used - only error is printed (no debug mode needed)
q)2+`
'type


q){2+`}[]
{2+`}
'type
+
2
`
q))

q)0 mod `a
k){x-y*x div y}   /function receiving an error
'type
div               /function that caused the error
0                 /its arguments
`a
q.q))             /namespace where the function (reciving an error) was defined


Q Tip 13.1 Function variables default to the emtpy list () in the debugger
We can check how far a function progressed before throwing the exception by checking which variables still have the default value.

IF THE FUNCTION THAT THREW THE ERROR WAS A FEW CALLS DEEP IN THE STACK, WE MAY WANT TO DEBUG THE FUNCTION ONE LEVEL ABOVE.
TO RISE ONE LEVEL IN THE STACK, WE CAN USE THE "'" COMMAND

IF HOWEVER, WE PREFER TO LET THE CODE CONTINUE BY PROVIDING A VALID RETURN VALUE,
WE CAN EXIT THE FUNCTION BY ENTERING A COLON ":" OPTIONALLY FOLLOWED BY THE DESIRED RETURN VALUE.

Single backslash \ exists one level of debugging (e.g. if we throw error while in the debugging mode we are moved to next level down
and to exit from there we have to use \ twice)

13.2 Trapping Errors
There are cases where the process causing the error is another q instance
or even a compiled library interfacing with the running q process.
In either of these two cases, the error message is printed to stdout, but the debugging session is not initiated.

To force debugging mode, we must be running in console mode and turn on the error trapping flag with the \e 1
(e.g. error thrown from .z.ts will only be printed....using \e 1 will cause the q process to stop in debugging mode

13.3 Breakpoints
Conditional breakpoints
Sometimes invalid values only occur under special conditions. For these cases, we can create condition breakpoints.
We can force q to only enter the debugging session when our special condition is met

q)f:{if[null x;break]; x+y}
q)f . 1 2
3
q)f . 0n 2
{if[null x;break]; x+y}
'break
q))x
0n
q))y
2f
q))
