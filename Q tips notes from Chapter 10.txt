
Chapter 10

10.1 Timer events
#The interval is defined in milliseconds
\t 1000     /using system command
-t 1000     /from command line

\t 0       /turns it off

.z.ts is called with a single argument: the current .z.p time (always with GMT time)

Nulls and Infinities
All (but two) Numerical and temporal data types have defined values for null and positive and negative infinity.
Kdb uses the smllest value for null
The next smallest value for negative infinity
The largest value is used for positive infinity

We can see underlying represenations when integer overflows
q)0Wi + (1 2 3 -1 0i)
0N -0W -2147483646 2147483646 0Wi

0Ni < -0Wi < any other integer < 0Wi

The boolean and byte types are the only types that do not have a null value.
The boolean type, by definition, only has two values: 0b and 1b. Neither of theses are classified as null.
q)null 01b
00b

There is no room in the data type to represent a missing value for boolean
The byte type has the same problem. By definition, a byte can be one of 256 values. Kdb+ does not treat any of these values as null.

Null is used to acknowledge that we do not know a value. Atomic operations propagate null values
q)1+1 2 0N
2 3 0N

Aggregate functions tend to ignore them.
q)avg 1 2 0N
1.5

But when computing an average of a list of vectors, it's not possible to ignore just a few null elements, in this case, the nulls propagate
q)avg (1 2 0N; 3 0N 5) /avg on matching indicies
2 0n 0n

The are 2 operators to fill missing values

"^" dyadic and atomic - fills the list with given value
q)0 1 ^ (1 2 0N; 3 0N 5)
1 2 0
3 1 5

fills - this one can be used to fill a list with last known value (fills forward)


Imprementing a Timer Utility

.dot apply operator "."
e.g. upsert
q)upsert
.[;();,;]

We can do drop in place
.[t;();_;i] where i is a raw to drop

10.2 Logging

q).Q.w[]
used| 122064      /how much memory is being used for kdb data
heap| 67108864    /how much memory has been allocated on the heap(pool)/reserved from the operating system
peak| 67108864
wmax| 0           /hard limit placed by the user, 0 means no user limit and kdb will use 2*mphy as the limit
mmap| 0           /amount of memory mapped from disk
mphy| 4294967295
syms| 596
symw| 21622
q)\w 0
596 21622
q)\w
121936 67108864 67108864 0 0 4294967295
q)

Kdb+ uses a memory pool to allow memory to be quickly reserved and freed.
When more memory is needed than exists in the pool/heap, kdb+ will allocate additional multiples of 64MB blocks.
The current size of heap/pool is second field
heap| 67108864  

When the process memory limit has been reached, q will coalesce /kəʊ.əˈles/ blocks of unused memory available in the pool/heap
that are at least 64MB, and return them back to operating system. Kdb+ then tries to allocate the requested block of memory,
if is still unable to allocate it, a `wsfull error is thrown and the process dies.

- it is possible to request memory to be coalesced by using the .Q.gc[]
-in addition q can be configured to automatically release blocks of memory that are at least 64MB by setting the -g 1
