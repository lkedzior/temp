
Chapter 10

10.1 Timer events
#The interval is defined in milliseconds
\t 1000     /using system command
-t 1000     /from command line

\t 0       /turns it off

.z.ts is called with a single argument: the current .z.p time (always with GMT time)

Nulls and Infinities
All (but two) Numerical and temporal data types have defined values for null and positive and negative infinity.
Kdb uses the smllest value for null
The next smallest value for negative infinity
The largest value is used for positive infinity

We can see underlying represenations when integer overflows
q)0Wi + (1 2 3 -1 0i)
0N -0W -2147483646 2147483646 0Wi

0Ni < -0Wi < any other integer < 0Wi

The boolean and byte types are the only types that do not have a null value.
The boolean type, by definition, only has two values: 0b and 1b. Neither of theses are classified as null.
q)null 01b
00b

There is no room in the data type to represent a missing value for boolean
The byte type has the same problem. By definition, a byte can be one of 256 values. Kdb+ does not treat any of these values as null.

Null is used to acknowledge that we do not know a value. Atomic operations propagate null values
q)1+1 2 0N
2 3 0N

Aggregate functions tend to ignore them.
q)avg 1 2 0N
1.5

But when computing an average of a list of vectors, it's not possible to ignore just a few null elements, in this case, the nulls propagate
q)avg (1 2 0N; 3 0N 5) /avg on matching indicies
2 0n 0n

The are 2 operators to fill missing values

"^" dyadic and atomic - fills the list with given value
q)0 1 ^ (1 2 0N; 3 0N 5)
1 2 0
3 1 5

fills - this one can be used to fill a list with last known value (fills forward)


Imprementing a Timer Utility

.dot apply operator "."
e.g. upsert
q)upsert
.[;();,;]

We can do drop in place
.[t;();_;i] where i is a raw to drop

10.2 Logging

q).Q.w[]
used| 122064      /how much memory is being used for kdb data
heap| 67108864    /how much memory has been allocated on the heap(pool)/reserved from the operating system
peak| 67108864
wmax| 0           /hard limit placed by the user, 0 means no user limit and kdb will use 2*mphy as the limit
mmap| 0           /amount of memory mapped from disk
mphy| 4294967295
syms| 596
symw| 21622
q)\w 0
596 21622
q)\w
121936 67108864 67108864 0 0 4294967295
q)

Kdb+ uses a memory pool to allow memory to be quickly reserved and freed.
When more memory is needed than exists in the pool/heap, kdb+ will allocate additional multiples of 64MB blocks.
The current size of heap/pool is second field
heap| 67108864  
When we run .Q.gc we can reduce the current heap size (it's done automatically if we use -g 1) and free some memory to the operating system.

When the process memory limit has been reached, q will coalesce /kəʊ.əˈles/ blocks of unused memory available in the pool/heap
that are at least 64MB, and return them back to operating system. Kdb+ then tries to allocate the requested block of memory,
if is still unable to allocate it, a `wsfull error is thrown and the process dies.

- it is possible to request memory to be coalesced by using the .Q.gc[]
-in addition q can be configured to automatically release blocks of memory that are at least 64MB by setting the -g 1

10.3 Command Line Options

q provides access to list of command line options (excluding the single letter system options) in the .z.x system variable

q opt.q -eod 22:00 -db qdb
q).z.x
"-eod"
"22:00"
"-db"
"qdb"
q)

Chapter 11

Generic null ::
We need to wrap it with (::) when performing operations to prevent it from being interpreted as a double assignment

W tip 1.1. Return null from update-only functions
Returning a null value prevents q from having to reference count the returned value.

In addition, when such a function is executed with a call to each, returning a null value prevents q from allocating memory to save the result vecotr. 

The return value for an event callback function (like upd) should not return anything

namespaces
if we are running in .md namespace e.g. defining .md.updq

updq:{
  ...//here if we reference global abc we are assuming .md.abc
  ...//if we want abc from the root we have to use `abc
}

Q Tip 11.2 Use if statements to exit functions early
  if[not  id in key `quote;:(::)];

Remember to maintain a consistent return value type when exit a function early

11.2. Server Sockets
When kdb+ is started from an interactive terminal, the kdb session will continue running while waiting for updates from STDIN.

When q is started as a server, where STDIN is closed, the process will exit immediately after the last command is executed.
To prevent the server from exiting we must open a server socket.

Port can be open from command line with -p or at runtime with \p

A positive port number starts kdb in single threaded mode i.e. each client connection is serviced sequentially,
and modifications to internal data structured are allowed.

Q Tip 11.3 Use negative port to make kdb+ read-only
A negative port number, puts the server into multi-threaded input queue mode in whcih
queries can be handled simultaneously.
To ensure high performance, kdb+ does not lock data structures.
Allowing multiple simultaneus client queries must therefor require each client to have a read-only view of the data.
This can be used to our advantage if we want to prevent clients from modifying our data.
One drawback of multi-threaded mode is that views can not recompute within a client query.
Doing so would modify the internal state of the server.

To alow the operating system to diynamically allocate the next available port,
positive and negative infinity 0W may also be used. We can then use \p to retrieve the allocated port.

11.3 Text Files

0: operator is used to convert lines of text into a table, and back again.
e.g. to create a table
/using * for strings
q)("JSF*";1#",") 0: `:ref.csv
/we can use space to skip a field from being read/loaded
/we can have less types than columns (most right columns are not loaded in that case)

string vs symbol
symbols enables text equility tests to be performed with a single pointer comparison

Symbols are stored in a global map and never deleted.
Strings however, once all references to a character vector are lost, the memory is recovered.

0/1 and Y/N can be read as "B" boolean type

Saving Tables as csv
/generate list of strings
"\t" 0: t

To save the file to disk we use 0: again
`:ref.txt 0: "\t" 0: t

To see the data
read0 `:ref.txt /returns list of strings

Reading csv where column names are missing ("," instead of enlist ",")
Data is returned as nested list so we need to flip `mycol`mycol2! (...)

11.4
main
Q Tip 11.8 Initialize programs and libraries with a function call
Having all the process code inside a 'main' function makes it easy for debuging.
We can start a process with -debug 1, process will load all the code needed but not run it
So we can debug line by line

Read complex config files from main
  ... 0: p`configFile
  
