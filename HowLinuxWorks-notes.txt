fork() - Program(P) creates a copy process
exec(program) - Program(P) starts a new program to replace iteself (replace P)

e.g. type ls in shell and press enter
  -> shell calls fork() to create copy of the shell
  -> new shell calls exec(ls)
  
A shell is a program that runs commands. It also serves as a small programming env.

All different Unix skells derive several of their features from the Bourne shell (/bin/sh),
a standard shell developed for early versions of Unix.
Every Unix system needs the Bourne shell in order to function correctly.

Linux uses an enhanced version of the Bourne shell called bash or the "Bourne-again" shell

The bash shell is the dafault shell on most Linux distributions,
and /bin/sh is normall a link to bash on a Linux system.

2.5.6 find and locate
locate file
locte searches an index that the system builds periodically.

2.8 Environment and Shell Variables
The shell can store TEMPORARY variables, called shell variables, containing the values of text strings.

To assign a value to a shell variable
STUFF=blah

An environment variable is like a shell variable, but it's not specific to the shell.
STUFF=blah
export STUFF
or
export STUFF=blah

ALL PROCESSES ON UNIX SYSTEMS HAVE ENVIRONMENT VARIABLE STORAGE.


The difference is that the environment variables are passed to programs that the shell runs,
whereas shell variables cannot be accessed in the commands that you run.

2.9 The Command Path
PATH is a special environment variable that contains the directories that the shell searches when trying to locate a command.
If programs with the same name appear in several directories in the path, the shell runs the first matching program.

2.10 Special Characters

2.14 Redirecting streams

ls /dummy > out.txt 2> err.txt
or
ls /dummy > out.txt 2>&1

To channel a file to a program's standard input, use <
head < /proc/cpuinfo
same as
head /proc/cpuinfo 
Most commands accept file names

$$ - shell variable that evaluates to the current shell's PID

Using Ctrl-c to terminate a process that is running in the current terminal
is the same as using kill with the INT (interrupt) signal

2.16.3 Job control
Shells support job control, which i a way to send TSTP and CONT signals to programs.
Ctrl-Z sends a TSTP signal to stop/suspend a process

to see list of stopped processes (STAT=T)
T    stopped, either by a job control signal or because it is being traced.
type jobs

To brigng it to foreground type fg
fg jobNumber (as seen in jobs)

If you want to run multiple shells, run each program in a separate terminl window,
put noninteractive processes in the background (bg),
or learn to use the screen program.

2.16.4 Background Processes
Normally, when you run a Unix command from the shell, you don't get the shell prompt back
until the program finishes executing.
However, you can detach a process from the shell and put it in the "background" with the (&)
which gives you the prompt back, e.g.

$ gunzip file.gz &

The shell should respond by printing the PID of the new background process, and the prompt should return immediately.

THE PROCESS WILL CONTINUE TO RUN AFTER YOU LOG OUT
?

The dark side of running background process is that they may expect to work with the standard input
(or worse, read directly from the terminal)
If a program tries to read something from the standard input when it's in the background, it can freeze or terminate

The best way to make sure that a background process does not bother you is to redirect its output and possibly input

If spurious output from background processes gets in your way redraw the content of your terminal window.

The bash shell support CTRL-L to redraw the entire sreen

If a program is reading from the standard input, CTRL-R usually redraws the current line

2.17 File MOdes and Permissions
