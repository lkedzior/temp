With q, analytics can be sent to the data.

When the results of a vactor operation are used as the inputs of the next operation,
all the data stored in the CPU's memory cache can be accessed immediately without needing
to search in the slower/larger caches or even the slowest and largest RAM memory located on the motherboard.

1.3 Programming Paradigms
* Q is interpreted because it requires no compilation phase.
ALL FUNCTIONS are compiled into bytecode at run time.
Definitions are compiled at startup and are lazily resolved.
They must be syntactically correct at startup, but the ordering of compilation is not important.

//Chapter 2
QHOME is needed to load q.k correctly

q needs k4.lic, by default it looks in the same dir as q.k
QLIC env variable can be usde to customise this

Q then loads q.q from QHOME
QINIT can be used to customise the init file

//2.2 Basics

#q as shebang script
#!/$QHOME/$QARCH/q
we can run ./script.q without referencing q binaries

#Redirecting the output from a separate process
When q is started interactively (q console), input is read from the STDIN file handle which is attached to the terminal.
If we redirect the output from a separate process into q's STDIN, it will accept commands from that process instead.
Once EOF is reached, the process will terminate

echo '1 "hello world\n";' | q
hello world

2.3 Syntax Rules
() are not used for function invocation
f(1;2;3) creates a list and does f[(1;2;3)]

##Leading whitespaces
q continues to accumulate text for parsing until it finds anohter command starting flush left (no leading whitespaces)
- if we forget to indent every line of a function and q parser encounters a line that is flush left,
it assumes a new definitiona has begun (our unction will be incomplete).

#############################Chapter3
- kdb performs type checking at runtime, a uniform list only needs its type checked a single time and not for each element,
once the type has been checked, performing arithementic oprations on uniform lists can be implemented in highly optimized C or assembly code

Using set/get to dynamically assign/access variables (where name is only known at runtime)
 This works only for global variables
 
#All monadic k operators has been given a keyword in q e.g.
q)first
*:

internal K structure is 16 bytes (this is for non numberic data like guid)
8 bytes for metadata type,reference count, attributes
8 bytes to store an atom

#################Chapter 4 Functions #########################
Functions
-  can have 1-8 arguments
- niladic functions are called with (::) assigned to the x parameter, x is silently ignored
- void functions return (::)
- functions can modify global state, avoid this, the good practice is to design the functions so that
  - data that needs to be modified is passed as an arg
  - modified values is passed back as a return value from the function
